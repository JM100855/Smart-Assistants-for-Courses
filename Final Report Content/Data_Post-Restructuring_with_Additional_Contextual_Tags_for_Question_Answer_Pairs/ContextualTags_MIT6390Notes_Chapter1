[
    {
        "type": "text",
        "text": "Introduction ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "The main focus of machine learning (ML) is making decisions or predictions based on data .There are a number of other fields with significant overlap in technique, but difference in focus: in economics and psychology, the goal is to discover underlying causal processes and in statistics it is to find a model that fits a data set well. In those fields, the end product is a model. In machine learning, we often fit models, but as a means to the end of making good predictions or decisions. ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "As ML methods have improved in their capability and scope, ML has become arguably the best way\u2013measured in terms of speed, human engineering time, and robustness\u2013to approach many applications. Great examples are face detection, speech recognition, and many kinds of language-processing tasks. Almost any application that involves understanding data or signals that come from the real world can be nicely addressed using machine learning. ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "This description paraphrased from a post on 9/4/12 at andrewgelman.com ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "One crucial aspect of machine learning approaches to solving problems is that human engineering plays an important role. A human still has to frame the problem: acquire and organize data, design a space of possible solutions, select a learning algorithm and its parameters, apply the algorithm to the data, validate the resulting solution to decide whether it\u2019s good enough to use, try to understand the impact on the people who will be affected by its deployment, etc. These steps are of great importance. ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "The conceptual basis of learning from data is the problem of induction : Why do we think that previously seen data will help us predict the future? This is a serious long standing philosophical problem. We will operationalize it by making assumptions, such as that all training data are so-called i.i.d.(independent and identically distributed), and that queries will be drawn from the same distribution as the training data, or that the answer comes from a set of possible answers known in advance. ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "In general, we need to solve these two problems: ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "\u2022estimation: When we have data that are noisy reflections of some underlying quantity of interest, we have to aggregate the data and make estimates or predictions about the quantity. How do we deal with the fact that, for example, the same treatment may end up with different results on different trials? How can we predict how well an estimate may compare to future results? ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "\u2022generalization: How can we predict results of a situation or experiment that we have never encountered before in our data set? ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "This means that the elements in the set are related in the sense that they all come from the same underlying probability distribution, but not in any other ways. ",
        "page_idx": 0,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "We can describe problems and their solutions using six characteristics, three of which characterize the problem and three of which characterize the solution: ",
        "page_idx": 1,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "1. Problem class: What is the nature of the training data and what kinds of queries will be made at testing time?   \n2. Assumptions: What do we know about the source of the data or the form of the solution?   \n3. Evaluation criteria: What is the goal of the prediction or estimation system? How will the answers to individual queries be evaluated? How will the overall performance of the system be measured?   \n4. Model type: Will an intermediate model of the world be made? What aspects of the data will be modeled in different variables/parameters? How will the model be used to make predictions?   \n5. Model class: What particular class of models will be used? What criterion will we use to pick a particular model from the model class?   \n6. Algorithm: What computational process will be used to fit the model to the data and/or to make predictions? ",
        "page_idx": 1,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "Without making some assumptions about the nature of the process generating the data, we cannot perform generalization. In the following sections, we elaborate on these ideas. ",
        "page_idx": 1,
        "tags": [
            "introduction"
        ]
    },
    {
        "type": "text",
        "text": "There are many different problem classes in machine learning. They vary according to what kind of data is provided and what kind of conclusions are to be drawn from it. Five standard problem classes are described below, to establish some notation and terminology. ",
        "page_idx": 1,
        "tags": [
            "problem_class"
        ]
    },
    {
        "type": "text",
        "text": "In this course, we will focus on classification and regression (two examples of supervised learning), and we will touch on reinforcement learning, sequence learning, and clustering. ",
        "page_idx": 1,
        "tags": [
            "problem_class"
        ]
    },
    {
        "type": "text",
        "text": "The idea of supervised learning is that the learning system is given inputs and told which specific outputs should be associated with them. We divide up supervised learning based on whether the outputs are drawn from a small finite set (classification) or a large finite ordered set or continuous set (regression). ",
        "page_idx": 1,
        "tags": [
            "supervised_learning"
        ]
    },
    {
        "type": "text",
        "text": "For a regression problem, the training data $\\mathcal{D}_{\\mathfrak{n}}$ is in the form of a set of $\\mathfrak{n}$ pairs: ",
        "page_idx": 1,
        "tags": [
            "regression"
        ]
    },
    {
        "type": "equation",
        "text": "$$\n\\mathcal{D}_{\\mathfrak{n}}=\\{(\\boldsymbol{\\mathfrak{x}}^{(1)},\\mathfrak{y}^{(1)}),\\dots,(\\boldsymbol{\\mathfrak{x}}^{(\\mathfrak{n})},\\mathfrak{y}^{(\\mathfrak{n})})\\},\n$$",
        "text_format": "latex",
        "page_idx": 1,
        "tags": [
            "regression"
        ]
    },
    {
        "type": "text",
        "text": "Don\u2019t feel you have to memorize all these kinds of learning, etc. We just want you to have a very high-level view of (part of) the breadth of the field. ",
        "page_idx": 1,
        "tags": [
            "regression"
        ]
    },
    {
        "type": "text",
        "text": "where $x^{(\\mathrm{i})}$ represents an input, most typically a ${\\mathrm d}{}.$ -dimensional vector of real and/or discrete values, and $\\mathfrak{y}^{(\\mathrm{i})}$ is the output to be predicted, in this case a real-number. The yvalues are sometimes called target values .",
        "page_idx": 1,
        "tags": [
            "regression"
        ]
    },
    {
        "type": "text",
        "text": "The goal in a regression problem is ultimately, given a new input value $x^{({\\mathrm n}+1)}$ , to predict the value of $\\mathfrak{y}^{(\\mathfrak{n}+\\bar{1})}$ . Regression problems are a kind of supervised learning , because the desired output $\\mathfrak{y}^{(\\mathrm{i})}$ is specified for each of the training examples $x^{(\\mathrm{i})}$ .",
        "page_idx": 1,
        "tags": [
            "regression"
        ]
    },
    {
        "type": "text",
        "text": "Last Updated: 05/06/24 18:25:27 Many textbooks use $x_{\\mathrm{i}}$ and $\\mathrm{t_{i}}$ instead of $x^{(\\mathfrak{i})}$ and $\\mathfrak{y}^{(\\mathrm{i})}$ . We find that notation somewhat difficult to manage when $x^{(\\mathrm{i})}$ is itself a vector and we need to talk about its elements. The notation we are using is standard in some other parts of the ML literature. ",
        "page_idx": 1,
        "tags": [
            "regression"
        ]
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1,
        "tags": [
            "regression"
        ]
    },
    {
        "type": "text",
        "text": "A classification problem is like regression, except that the values that $\\mathfrak{y}^{(\\mathrm{i})}$ can take do not have an order. The classification problem is binary or two-class if $\\mathfrak{y}^{(\\mathrm{i})}$ (also known as the class ) is drawn from a set of two possible values; otherwise, it is called multi-class .",
        "page_idx": 2,
        "tags": [
            "classification"
        ]
    },
    {
        "type": "text",
        "text": "Unsupervised learning doesn\u2019t involve learning a function from inputs to outputs based on a set of input-output pairs. Instead, one is given a data set and generally expected to find some patterns or structure inherent in it. ",
        "page_idx": 2,
        "tags": [
            "unsupervised_learning"
        ]
    },
    {
        "type": "text",
        "text": "Given samples $\\mathbf{\\boldsymbol{x}}^{(1)},\\ldots,\\mathbf{\\boldsymbol{x}}^{(\\mathrm{n})}\\ \\in\\ \\mathbb{R}^{\\mathrm{d}},$ the goal is to find a partitioning (or \u201cclustering\u201d) of the samples that groups together similar samples. There are many different objectives, depending on the definition of the similarity between samples and exactly what criterion is to be used (e.g., minimize the average distance between elements inside a cluster and maximize the average distance between elements across clusters). Other methods perform a \u201csoft\u201d clustering, in which samples may be assigned 0.9 membership in one cluster and 0.1 in another. Clustering is sometimes used as a step in the so-called density estimation (described below), and sometimes to find useful structure or influential features in data. ",
        "page_idx": 2,
        "tags": [
            "clustering"
        ]
    },
    {
        "type": "text",
        "text": "Given samples $\\mathbf{x}^{(1)},\\ldots,\\mathbf{x}^{(\\mathrm{n})}\\in\\mathbb{R}^{\\mathrm{d}}$ drawn i.i.d. from some distribution $\\mathrm{Pr}(X)_{\\neq}$ the goal is to predict the probability $\\mathrm{Pr}(\\mathbf{x}^{(\\mathrm{n+1})})$ of an element drawn from the same distribution. Density estimation sometimes plays a role as a \u201csubroutine\u201d in the overall learning method for supervised learning, as well. ",
        "page_idx": 2,
        "tags": [
            "density_estimation"
        ]
    },
    {
        "type": "text",
        "text": "Given samples $\\mathbf{\\boldsymbol{x}}^{(1)},\\ldots,\\mathbf{\\boldsymbol{x}}^{(\\mathrm{n})}\\;\\in\\;\\mathbb{R}^{\\mathrm{D}},$ , the problem is to re-represent them as points in a d-dimensional space, where $\\mathrm{d}<\\mathrm{D}$ . The goal is typically to retain information in the data set that will, e.g., allow elements of one class to be distinguished from another. ",
        "page_idx": 2,
        "tags": [
            "dimensionality_reduction"
        ]
    },
    {
        "type": "text",
        "text": "Dimensionality reduction is a standard technique that is particularly useful for visualizing or understanding high-dimensional data. If the goal is ultimately to perform regression or classification on the data after the dimensionality is reduced, it is usually best to articulate an objective for the overall prediction problem rather than to first do dimensionality reduction without knowing which dimensions will be important for the prediction task. ",
        "page_idx": 2,
        "tags": [
            "dimensionality_reduction"
        ]
    },
    {
        "type": "text",
        "text": "In sequence learning, the goal is to learn a mapping from input sequences $\\ x_{0},\\ldots,x_{\\mathrm{n}}$ to output sequences $\\mathbb{y}_{1},\\ldots,\\mathbb{y}_{\\mathfrak{m}}$ . The mapping is typically represented as a state machine , with one function $\\boldsymbol{\\mathrm{f}}_{s}$ used to compute the next hidden internal state given the input, and another function $\\boldsymbol{\\mathrm{f}}_{\\mathrm{o}}$ used to compute the output given the current hidden state. ",
        "page_idx": 2,
        "tags": [
            "sequence_learning"
        ]
    },
    {
        "type": "text",
        "text": "It is supervised in the sense that we are told what output sequence to generate for which input sequence, but the internal functions have to be learned by some method other than direct supervision, because we don\u2019t know what the hidden state sequence is. ",
        "page_idx": 2,
        "tags": [
            "sequence_learning"
        ]
    },
    {
        "type": "text",
        "text": "The capital Xis a typical practice to emphasize this is a so-called random variable. Small letters are often used in probability too; those are typically reserved to denote the realized values of random variables. It might help to concretely think of cointosses; there, the toss outcome is a random variable and it may be realized as a \"head\". This paragraph actually talks about both a random variable and a realization of it, can you spot that from the notation and do you feel the difference? ",
        "page_idx": 2,
        "tags": [
            "sequence_learning"
        ]
    },
    {
        "type": "text",
        "text": "In reinforcement learning, the goal is to learn a mapping from input values (typically assumed to be states of an agent or system; for now, think e.g. the velocity of a moving car) to output values (typically we want control actions; for now, think e.g. if to accelerate or hit the brake). However, we need to learn the mapping without a direct supervision signal to specify which output values are best for a particular input; instead, the learning problem is framed as an agent interacting with an environment, in the following setting: ",
        "page_idx": 3,
        "tags": [
            "reinforcement_learning"
        ]
    },
    {
        "type": "text",
        "text": "\u2022 The agent observes the current state $s_{\\mathrm{t}}$ .Note it\u2019s standard practice in reinforcement   \n\u2022 It selects an action $\\upalpha_{\\mathrm{t}}$ .learning to use sand a instead of $x$ and $\\boldsymbol{\\mathfrak{y}}$   \n\u2022 It receives a reward, $\\mathsf{r}_{\\mathrm{t}},$ which typically depends on $s_{\\mathrm{t}}$ and possibly $\\upalpha_{\\mathrm{t}}$ .to denote the machine learning model\u2019s in  \n\u2022 The environment transitions probabilistically to a new state, $s_{\\mathrm{t+1}},$ , with a distribution put and output. The that depends only on $s_{\\mathrm{t}}$ and $\\upalpha_{\\mathrm{t}}$ .subscript timestep, and captures tdenotes the   \n\u2022 The agent observes the current state, $s_{\\mathrm{t+1}}$ .the sequential nature of the problem.   \n\u2022 . . . ",
        "page_idx": 3,
        "tags": [
            "reinforcement_learning"
        ]
    },
    {
        "type": "text",
        "text": "The goal is to find a policy $\\pi_{\\nu}$ , mapping sto ${\\mathbf a}_{\\scriptscriptstyle\\!\\mathrm{.}}$ , (that is, states to actions) such that some long-term sum or average of rewards ris maximized. ",
        "page_idx": 3,
        "tags": [
            "reinforcement_learning"
        ]
    },
    {
        "type": "text",
        "text": "This setting is very different from either supervised learning or unsupervised learning, because the agent\u2019s action choices affect both its reward and its ability to observe the environment. It requires careful consideration of the long-term effects of actions, as well as all of the other issues that pertain to supervised learning. ",
        "page_idx": 3,
        "tags": [
            "reinforcement_learning"
        ]
    },
    {
        "type": "text",
        "text": "There are many other problem settings. Here are a few. ",
        "page_idx": 3,
        "tags": [
            "other_settings"
        ]
    },
    {
        "type": "text",
        "text": "In semi-supervised learning, we have a supervised-learning training set, but there may be an additional set of $x^{(\\mathrm{i})}$ values with no known $\\mathfrak{y}^{(\\mathrm{i})}$ . These values can still be used to improve learning performance (if they are drawn from $\\mathrm{Pr}(X)$ that is the marginal of $\\mathrm{Pr}(X,Y)$ that governs the rest of the data set). ",
        "page_idx": 3,
        "tags": [
            "other_settings"
        ]
    },
    {
        "type": "text",
        "text": "In active learning, it is assumed to be expensive to acquire a label $\\mathfrak{y}^{(\\mathfrak{i})}$ (imagine asking a human to read an $\\mathbf{x}$ -ray image), so the learning algorithm can sequentially ask for particular inputs $x^{(\\mathrm{i})}$ to be labeled, and must carefully select queries in order to learn as effectively as possible while minimizing the cost of labeling. ",
        "page_idx": 3,
        "tags": [
            "other_settings"
        ]
    },
    {
        "type": "text",
        "text": "In transfer learning (also called meta-learning ), there are multiple tasks, with data drawn from different, but related, distributions. The goal is for experience with previous tasks to apply to learning a current task in a way that requires decreased experience with the new task. ",
        "page_idx": 3,
        "tags": [
            "other_settings"
        ]
    },
    {
        "type": "text",
        "text": "The kinds of assumptions that we can make about the data source or the solution include: ",
        "page_idx": 3,
        "tags": [
            "assumptions"
        ]
    },
    {
        "type": "text",
        "text": "\u2022 The data are independent and identically distributed (i.i.d.).   \n\u2022 The data are generated by a Markov chain (i.e. outputs only depend only on the current state , with no additional memory ).   \n\u2022 The process generating the data might be adversarial. ",
        "page_idx": 3,
        "tags": [
            "assumptions"
        ]
    },
    {
        "type": "text",
        "text": "\u2022 The \u201ctrue\u201d model that is generating the data can be perfectly described by one of some particular set of hypotheses. ",
        "page_idx": 4,
        "tags": [
            "assumptions"
        ]
    },
    {
        "type": "text",
        "text": "The effect of an assumption is often to reduce the \u201csize\u201d or \u201cexpressiveness\u201d of the space of possible hypotheses and therefore reduce the amount of data required to reliably identify an appropriate hypothesis. ",
        "page_idx": 4,
        "tags": [
            "assumptions"
        ]
    },
    {
        "type": "text",
        "text": "Once we have specified a problem class, we need to say what makes an output or the answer to a query good, given the training data. We specify evaluation criteria at two levels: how an individual prediction is scored, and how the overall behavior of the prediction or estimation system is scored. ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "The quality of predictions from a learned model is often expressed in terms of a loss function . A loss function $\\mathcal{L}(\\mathfrak{g},\\mathfrak{a})$ tells you how much you will be penalized for making a guess $9$ when the answer is actually $\\mathrm{^a}$ . There are many possible loss functions. Here are some frequently used examples: ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "\u20220-1 Loss applies to predictions drawn from finite domains. ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "equation",
        "text": "$$\n\\mathcal{L}(\\mathfrak{g},\\mathfrak{a})=\\left\\{\\begin{array}{l l}{0}&{\\mathrm{if~}\\mathfrak{g}=\\mathfrak{a}}\\\\ {1}&{\\mathrm{otherwise}}\\end{array}\\right.\n$$",
        "text_format": "latex",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "\u2022Squared loss ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "equation",
        "text": "$$\n\\mathcal{L}(\\mathbf{g},\\mathbf{a})=(\\mathbf{g}-\\mathbf{a})^{2}\n$$",
        "text_format": "latex",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "If the actual values are drawn from a continuous distribution, the probability they would ever be equal to some predicted gis 0 (except for some weird cases). ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "equation",
        "text": "$$\n\\mathcal{L}(\\mathfrak{g},\\mathfrak{a})=|\\mathfrak{g}-\\mathfrak{a}|\n$$",
        "text_format": "latex",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "\u2022Absolute loss ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "\u2022Asymmetric loss Consider a situation in which you are trying to predict whether someone is having a heart attack. It might be much worse to predict $^{\\prime\\prime}\\mathrm{no}^{\\prime\\prime}$ when the answer is really $\\mathrm{{^{\\prime\\prime}{y e s}^{\\prime\\prime}}}$ , than the other way around. ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "equation",
        "text": "$$\n\\mathcal{L}(\\mathbf{g},\\mathbf{a})=\\left\\{\\begin{array}{l l}{1}&{\\mathrm{if}\\ g=1\\ \\mathrm{and}\\ \\mathbf{a}=0}\\\\ {10}&{\\mathrm{if}\\ g=0\\ \\mathrm{and}\\ \\mathbf{a}=1}\\\\ {0}&{\\mathrm{otherwise}}\\end{array}\\right.\n$$",
        "text_format": "latex",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "Any given prediction rule will usually be evaluated based on multiple predictions and the loss of each one. At this level, we might be interested in: ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "\u2022 Minimizing expected loss over all the predictions (also known as risk )  \n\u2022 Minimizing maximum loss: the loss of the worst prediction   \n\u2022 Minimizing or bounding regret: how much worse this predictor performs than the best one drawn from some class   \n\u2022 Characterizing asymptotic behavior: how well the predictor will perform in the limit of infinite training data   \n\u2022 Finding algorithms that are probably approximately correct: they probably generate a hypothesis that is right most of the time. ",
        "page_idx": 4,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "There is a theory of rational agency that argues that you should always select the action that minimizes the expected loss . This strategy will, for example, make you the most money in the long run, in a gambling setting. As mentioned above, expected loss is also sometimes called risk in ML literature, but that term means other things in economics or other parts of decision theory, so be careful...it\u2019s risky to use it. We will, most of the time, concentrate on this criterion. ",
        "page_idx": 5,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "Of course, there are other models for action selection and it\u2019s clear that people do not always (or maybe even often) select actions that follow this rule. ",
        "page_idx": 5,
        "tags": [
            "evaluation_criteria"
        ]
    },
    {
        "type": "text",
        "text": "Recall that the goal of a ML system is typically to estimate or generalize, based on data provided. Below, we examine the role of model-making in machine learning. ",
        "page_idx": 5,
        "tags": [
            "model_type"
        ]
    },
    {
        "type": "text",
        "text": "In some simple cases, in response to queries, we can generate predictions directly from the training data, without the construction of any intermediate model, or more precisely, without the learning of any parameters. ",
        "page_idx": 5,
        "tags": [
            "non-parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "For example, in regression or classification, we might generate an answer to a new query by averaging answers to recent queries, as in the nearest neighbor method. ",
        "page_idx": 5,
        "tags": [
            "non-parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "This two-step process is more typical: ",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "1. \u201cFit\u201d a model (with some a-prior chosen parameterization) to the training data 2. Use the model directly to make predictions ",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "In the parametric models setting of regression or classification, the model will be some hypothesis or prediction rule $\\mathfrak{y}=\\mathfrak{h}(\\mathfrak{x};\\Theta)$ for some functional form h. The term hypothesis has its roots in statistical learning and the scientific method, where models or hypotheses about the world are tested against real data, and refined with more evidence, observations, or insights. Note that the parameters themselves are only part of the assumptions that we\u2019re making about the world. The model itself is a hypothesis that will be refined with more evidence. ",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "The idea is that $\\Theta$ is a set of one or more parameter values that will be determined by fitting the model to the training data and then be held fixed during testing. ",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "Given a new $x^{(\\mathrm{n}+1)}$ , we would then make the prediction ${\\sf h}({\\sf x^{(n+1)}};\\Theta)$ .",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "The fitting process is often articulated as an optimization problem: Find a value of \u0398that minimizes some criterion involving $\\Theta$ and the data. An optimal strategy, if we knew the actual underlying distribution on our data, $\\mathrm{Pr}(X,Y)$ would be to predict the value of $\\boldsymbol{\\mathfrak{y}}$ that minimizes the expected loss , which is also known as the test error . If we don\u2019t have that actual underlying distribution, or even an estimate of it, we can take the approach of minimizing the training error : that is, finding the prediction rule $\\mathtt{h}$ that minimizes the average loss on our training data set. So, we would seek $\\Theta$ that minimizes ",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "equation",
        "text": "$$\n\\displaystyle\\xi_{\\ n}(\\mathbf{h};\\Theta)=\\frac{1}{\\mathfrak{n}}\\sum_{\\mathfrak{i}=1}^{\\mathfrak{n}}\\mathcal{L}(\\mathbf{h}(\\mathbf{x}^{(\\mathfrak{i})};\\Theta),\\mathfrak{y}^{(\\mathfrak{i})})~~,\n$$",
        "text_format": "latex",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "where the loss function $\\mathcal{L}(\\mathfrak{g},\\mathfrak{a})$ measures how bad it would be to make a guess of gwhen the actual value is $\\mathrm{^a}$ .",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "We will find that minimizing training error alone is often not a good choice: it is possible to emphasize fitting the current data too strongly and end up with a hypothesis that does not generalize well when presented with new $x$ values. ",
        "page_idx": 5,
        "tags": [
            "parametric_models"
        ]
    },
    {
        "type": "text",
        "text": "A model class $\\mathcal{M}$ is a set of possible models, typically parameterized by a vector of parameters $\\Theta$ . What assumptions will we make about the form of the model? When solving a regression problem using a prediction-rule approach, we might try to find a linear function ${\\sf h}({\\sf x};\\theta,\\theta_{0})\\,=\\,\\Theta^{\\sf T}{\\boldsymbol{x}}+\\theta_{0}$ that fits our data well. In this example, the parameter vector $\\Theta=\\left(\\theta,\\theta_{0}\\right)$ .",
        "page_idx": 6,
        "tags": [
            "model_class_and_parameter_fitting"
        ]
    },
    {
        "type": "text",
        "text": "For problem types such as classification, there are huge numbers of model classes that have been considered...we\u2019ll spend much of this course exploring these model classes, especially neural networks models. We will almost completely restrict our attention to model classes with a fixed, finite number of parameters. Models that relax this assumption are called \u201cnon-parametric\u201d models. ",
        "page_idx": 6,
        "tags": [
            "model_class_and_parameter_fitting"
        ]
    },
    {
        "type": "text",
        "text": "How do we select a model class? In some cases, the ML practitioner will have a good idea of what an appropriate model class is, and will specify it directly. In other cases, we may consider several model classes and choose the best based on some objective function. In such situations, we are solving a model selection problem: model-selection is to pick a model class $\\mathcal{M}$ from a (usually finite) set of possible model classes, whereas model fitting is to pick a particular model in that class, specified by (usually continuous) parameters $\\Theta$ .",
        "page_idx": 6,
        "tags": [
            "model_class_and_parameter_fitting"
        ]
    },
    {
        "type": "text",
        "text": "Once we have described a class of models and a way of scoring a model given data, we have an algorithmic problem: what sequence of computational instructions should we run in order to find a good model from our class? For example, determining the parameter vector which minimizes the training error might be done using a familiar least-squares minimization algorithm, when the model his a function being fit to some data x.",
        "page_idx": 6,
        "tags": [
            "algorithm"
        ]
    },
    {
        "type": "text",
        "text": "Sometimes we can use software that was designed, generically, to perform optimization. In many other cases, we use algorithms that are specialized for ML problems, or for particular hypotheses classes. Some algorithms are not easily seen as trying to optimize a particular criterion. In fact, a historically important method for finding linear classifiers, the perceptron algorithm, has this character. ",
        "page_idx": 6,
        "tags": [
            "algorithm"
        ]
    }
]